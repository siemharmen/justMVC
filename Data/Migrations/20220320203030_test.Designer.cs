// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReversiMVC.Data;

namespace ReversiMVC.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220320203030_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ReversiMVC.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Row00")
                        .HasColumnType("int");

                    b.Property<int>("Row01")
                        .HasColumnType("int");

                    b.Property<int>("Row02")
                        .HasColumnType("int");

                    b.Property<int>("Row03")
                        .HasColumnType("int");

                    b.Property<int>("Row04")
                        .HasColumnType("int");

                    b.Property<int>("Row05")
                        .HasColumnType("int");

                    b.Property<int>("Row06")
                        .HasColumnType("int");

                    b.Property<int>("Row07")
                        .HasColumnType("int");

                    b.Property<int>("Row10")
                        .HasColumnType("int");

                    b.Property<int>("Row11")
                        .HasColumnType("int");

                    b.Property<int>("Row12")
                        .HasColumnType("int");

                    b.Property<int>("Row13")
                        .HasColumnType("int");

                    b.Property<int>("Row14")
                        .HasColumnType("int");

                    b.Property<int>("Row15")
                        .HasColumnType("int");

                    b.Property<int>("Row16")
                        .HasColumnType("int");

                    b.Property<int>("Row17")
                        .HasColumnType("int");

                    b.Property<int>("Row20")
                        .HasColumnType("int");

                    b.Property<int>("Row21")
                        .HasColumnType("int");

                    b.Property<int>("Row22")
                        .HasColumnType("int");

                    b.Property<int>("Row23")
                        .HasColumnType("int");

                    b.Property<int>("Row24")
                        .HasColumnType("int");

                    b.Property<int>("Row25")
                        .HasColumnType("int");

                    b.Property<int>("Row26")
                        .HasColumnType("int");

                    b.Property<int>("Row27")
                        .HasColumnType("int");

                    b.Property<int>("Row30")
                        .HasColumnType("int");

                    b.Property<int>("Row31")
                        .HasColumnType("int");

                    b.Property<int>("Row32")
                        .HasColumnType("int");

                    b.Property<int>("Row33")
                        .HasColumnType("int");

                    b.Property<int>("Row34")
                        .HasColumnType("int");

                    b.Property<int>("Row35")
                        .HasColumnType("int");

                    b.Property<int>("Row36")
                        .HasColumnType("int");

                    b.Property<int>("Row37")
                        .HasColumnType("int");

                    b.Property<int>("Row40")
                        .HasColumnType("int");

                    b.Property<int>("Row41")
                        .HasColumnType("int");

                    b.Property<int>("Row42")
                        .HasColumnType("int");

                    b.Property<int>("Row43")
                        .HasColumnType("int");

                    b.Property<int>("Row44")
                        .HasColumnType("int");

                    b.Property<int>("Row45")
                        .HasColumnType("int");

                    b.Property<int>("Row46")
                        .HasColumnType("int");

                    b.Property<int>("Row47")
                        .HasColumnType("int");

                    b.Property<int>("Row50")
                        .HasColumnType("int");

                    b.Property<int>("Row51")
                        .HasColumnType("int");

                    b.Property<int>("Row52")
                        .HasColumnType("int");

                    b.Property<int>("Row53")
                        .HasColumnType("int");

                    b.Property<int>("Row54")
                        .HasColumnType("int");

                    b.Property<int>("Row55")
                        .HasColumnType("int");

                    b.Property<int>("Row56")
                        .HasColumnType("int");

                    b.Property<int>("Row57")
                        .HasColumnType("int");

                    b.Property<int>("Row60")
                        .HasColumnType("int");

                    b.Property<int>("Row61")
                        .HasColumnType("int");

                    b.Property<int>("Row62")
                        .HasColumnType("int");

                    b.Property<int>("Row63")
                        .HasColumnType("int");

                    b.Property<int>("Row64")
                        .HasColumnType("int");

                    b.Property<int>("Row65")
                        .HasColumnType("int");

                    b.Property<int>("Row66")
                        .HasColumnType("int");

                    b.Property<int>("Row67")
                        .HasColumnType("int");

                    b.Property<int>("Row70")
                        .HasColumnType("int");

                    b.Property<int>("Row71")
                        .HasColumnType("int");

                    b.Property<int>("Row72")
                        .HasColumnType("int");

                    b.Property<int>("Row73")
                        .HasColumnType("int");

                    b.Property<int>("Row74")
                        .HasColumnType("int");

                    b.Property<int>("Row75")
                        .HasColumnType("int");

                    b.Property<int>("Row76")
                        .HasColumnType("int");

                    b.Property<int>("Row77")
                        .HasColumnType("int");

                    b.Property<int?>("SpelID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SpelID");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("ReversiMVC.Models.Spel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AandeBeurt")
                        .HasColumnType("int");

                    b.Property<string>("Omschrijving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speler1Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speler2Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Spellen");
                });

            modelBuilder.Entity("ReversiMVC.Models.Speler", b =>
                {
                    b.Property<string>("Guid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AantalGelijk")
                        .HasColumnType("int");

                    b.Property<int>("AantalGewonnen")
                        .HasColumnType("int");

                    b.Property<int>("AantalVerloren")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Guid");

                    b.ToTable("Spelers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReversiMVC.Models.Board", b =>
                {
                    b.HasOne("ReversiMVC.Models.Spel", "Spel")
                        .WithMany()
                        .HasForeignKey("SpelID");

                    b.Navigation("Spel");
                });
#pragma warning restore 612, 618
        }
    }
}
